// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package node

import (
	"fmt"
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

func (t *CommitRef) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{161}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.RootCID (cid.Cid) (struct)
	if len("RootCID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"RootCID\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("RootCID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("RootCID")); err != nil {
		return err
	}

	if err := cbg.WriteCidBuf(scratch, w, t.RootCID); err != nil {
		return xerrors.Errorf("failed to write cid field t.RootCID: %w", err)
	}

	return nil
}

func (t *CommitRef) UnmarshalCBOR(r io.Reader) error {
	*t = CommitRef{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CommitRef: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.RootCID (cid.Cid) (struct)
		case "RootCID":

			{

				c, err := cbg.ReadCid(br)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.RootCID: %w", err)
				}

				t.RootCID = c

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

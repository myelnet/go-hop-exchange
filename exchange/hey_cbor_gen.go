// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package exchange

import (
	"fmt"
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufHey = []byte{131}

func (t *Hey) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufHey); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Regions ([]exchange.RegionCode) (slice)
	if len(t.Regions) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Regions was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Regions))); err != nil {
		return err
	}
	for _, v := range t.Regions {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.IndexRoot (cid.Cid) (struct)

	if t.IndexRoot == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.IndexRoot); err != nil {
			return xerrors.Errorf("failed to write cid field t.IndexRoot: %w", err)
		}
	}

	// t.Cluster (string) (string)
	if len(t.Cluster) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Cluster was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Cluster))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Cluster)); err != nil {
		return err
	}
	return nil
}

func (t *Hey) UnmarshalCBOR(r io.Reader) error {
	*t = Hey{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Regions ([]exchange.RegionCode) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Regions: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Regions = make([]RegionCode, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Regions slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Regions was not a uint, instead got %d", maj)
		}

		t.Regions[i] = RegionCode(val)
	}

	// t.IndexRoot (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.IndexRoot: %w", err)
			}

			t.IndexRoot = &c
		}

	}
	// t.Cluster (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.Cluster = string(sval)
	}
	return nil
}
